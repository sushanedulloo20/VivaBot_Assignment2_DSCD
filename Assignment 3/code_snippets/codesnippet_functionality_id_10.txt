def Map(self, request, context):
        try:
            # Create directories for partitions if they don't exist
            mapper_dir = f"Data/Mappers/M{self.port_no - 50050}"

            # write empty to string to all partition files in mapper dir.
            for partition_id in range(1, request.no_of_partitions + 1):
                partition_file_path = os.path.join(mapper_dir, f"partition_{partition_id}.txt")
                with open(partition_file_path, "w") as partition_file:
                    partition_file.write("")

            # Read the points from the file based on the given start and end indices
            points = self.read_points_from_file(request.start_index, request.end_index)

            for point in points:
                nearest_centroid_index = self.calculate_nearest_centroid_index(point, request.centroids)
                self.Partition(nearest_centroid_index, point, request.no_of_partitions)

            # Return a success indicator
            failure_probability = random.random()
            if failure_probability < 0.5:
                return master_pb2.MapResponse(success=False)
            
            return master_pb2.MapResponse(success=True)

        except grpc.RpcError as rpc_err:
            return master_pb2.ReduceResponse(success=False)
        
        except IOError as io_err:
            return master_pb2.ReduceResponse(success=False)
        
        except Exception as e:
            return master_pb2.MapResponse(success=False)